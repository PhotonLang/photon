?start: statement*



statement: "OPEN"i string "AS"i NAME -> open_stmt
        |"APPLY"i string "TO"i NAME -> apply_stmt
        |"SAVE"i NAME "TOSYS" string -> save_stmt
        |"CLOSE"i NAME -> close_stmt
string: /("[^"\\]*(\\.[^"\\]*)*"|'[^'\\]*(\\.[^'\\]*)*')/
integer: /-?\d+/
ntuple: "(" (NUMBER ",")* NUMBER ")"

%import common.WS
%ignore WS
%import common.WS_INLINE
%ignore WS_INLINE
%import common.CNAME -> NAME
%import common.NEWLINE -> NEWLINE
%import common.CPP_COMMENT -> SINGLE_COMMENT
%import common.C_COMMENT -> MULTILINE_COMMENT
%ignore MULTILINE_COMMENT
%ignore SINGLE_COMMENT
%ignore NEWLINE
%import common.SIGNED_NUMBER -> NUMBER
%import common.INT -> INTEGER


// This lark file is heavily inspired by: https://github.com/f-stop-lang/f-stop/blob/main/f_stop/grammar.lark, cus I suck at writing lark files :( 
// Subject to major changes!